// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: contact_information.sql

package account_db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const archiveContactInformation = `-- name: ArchiveContactInformation :exec
UPDATE account.contact_information
SET
    is_archived=$1,
    deleted_at=$2,
    updated_at=$3
WHERE id=$4
`

type ArchiveContactInformationParams struct {
	IsArchived sql.NullBool
	DeletedAt  sql.NullTime
	UpdatedAt  sql.NullTime
	ID         uuid.UUID
}

func (q *Queries) ArchiveContactInformation(ctx context.Context, arg ArchiveContactInformationParams) error {
	_, err := q.db.ExecContext(ctx, archiveContactInformation,
		arg.IsArchived,
		arg.DeletedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const createContactInformation = `-- name: CreateContactInformation :exec
INSERT INTO account.contact_information (
    id,
    profile_id,
    contact_information_type,
    is_public,
    contact_information,
    created_at,
    is_archived
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
`

type CreateContactInformationParams struct {
	ID                     uuid.UUID
	ProfileID              uuid.NullUUID
	ContactInformationType sql.NullString
	IsPublic               sql.NullBool
	ContactInformation     sql.NullString
	CreatedAt              sql.NullTime
	IsArchived             sql.NullBool
}

func (q *Queries) CreateContactInformation(ctx context.Context, arg CreateContactInformationParams) error {
	_, err := q.db.ExecContext(ctx, createContactInformation,
		arg.ID,
		arg.ProfileID,
		arg.ContactInformationType,
		arg.IsPublic,
		arg.ContactInformation,
		arg.CreatedAt,
		arg.IsArchived,
	)
	return err
}

const getAllContactInformation = `-- name: GetAllContactInformation :many
SELECT id, profile_id, contact_information_type, is_public, contact_information, created_at, updated_at, deleted_at, is_archived FROM account.contact_information
WHERE 
    ($1::uuid = '00000000-0000-0000-0000-000000000000' OR profile_id = $1)
    AND ($2::text = '' OR contact_information_type = $2)
    AND ($3::bool = true OR is_public = $3)
    AND ($4::bool = false OR is_archived = $4)
`

type GetAllContactInformationParams struct {
	Column1 uuid.UUID
	Column2 string
	Column3 bool
	Column4 bool
}

func (q *Queries) GetAllContactInformation(ctx context.Context, arg GetAllContactInformationParams) ([]AccountContactInformation, error) {
	rows, err := q.db.QueryContext(ctx, getAllContactInformation,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountContactInformation
	for rows.Next() {
		var i AccountContactInformation
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.ContactInformationType,
			&i.IsPublic,
			&i.ContactInformation,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsArchived,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByID = `-- name: GetByID :one
SELECT id, profile_id, contact_information_type, is_public, contact_information, created_at, updated_at, deleted_at, is_archived FROM account.contact_information
WHERE id=$1
`

func (q *Queries) GetByID(ctx context.Context, id uuid.UUID) (AccountContactInformation, error) {
	row := q.db.QueryRowContext(ctx, getByID, id)
	var i AccountContactInformation
	err := row.Scan(
		&i.ID,
		&i.ProfileID,
		&i.ContactInformationType,
		&i.IsPublic,
		&i.ContactInformation,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsArchived,
	)
	return i, err
}

const updateContactInformation = `-- name: UpdateContactInformation :exec
UPDATE account.contact_information
SET
    is_public=$1,
    contact_information=$2,
    updated_at=$3
WHERE profile_id=$4 AND contact_information_type=$5
`

type UpdateContactInformationParams struct {
	IsPublic               sql.NullBool
	ContactInformation     sql.NullString
	UpdatedAt              sql.NullTime
	ProfileID              uuid.NullUUID
	ContactInformationType sql.NullString
}

func (q *Queries) UpdateContactInformation(ctx context.Context, arg UpdateContactInformationParams) error {
	_, err := q.db.ExecContext(ctx, updateContactInformation,
		arg.IsPublic,
		arg.ContactInformation,
		arg.UpdatedAt,
		arg.ProfileID,
		arg.ContactInformationType,
	)
	return err
}
